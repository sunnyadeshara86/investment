// <auto-generated />
using System;
using Investment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Investment.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.20");

            modelBuilder.Entity("Investment.Domain.Entities.Assets.AgriCultureProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CurrentMarketValue")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfPurchase")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("MarketValueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertyDetail")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PropertyName")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AgriCultureProperties");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Assets.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccountType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BalanceAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Assets.Cash", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Cash");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Assets.CommercialProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CurrentMarketValue")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfPurchase")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("MarketValueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertyDetail")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PropertyName")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CommercialProperties");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Assets.FixedDeposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AmountInvested")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("DividendType")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FundValue")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("FundValueDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvestorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("RateOfInterest")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FixedDeposits");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Assets.Jewellery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CurrentMarketValue")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfPurchase")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("MarketValueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertyDetail")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PropertyName")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Jewelleries");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Assets.MutualFund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FundName")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvestorId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("NetAssetValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NumberOfUnits")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MutualFunds");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Assets.NationalSavingCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AmountInvested")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FundValue")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("FundValueDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvestorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("RateOfInterest")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NationalSavingCertificates");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Assets.OtherProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CurrentMarketValue")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfPurchase")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("MarketValueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PropertyDetail")
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyName")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OtherProperties");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Assets.PersonalProvidentFund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FundValue")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("FundValueDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InstallmentAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvestorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PPFNumber")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RateOfInterest")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PersonalProvidentFunds");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Assets.PostOfficeSaving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AmountInvested")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FundValue")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("FundValueDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvestmentMode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InvestorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("RateOfInterest")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PostOfficeSavings");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Assets.ProvidentFund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FundValue")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("FundValueDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvestorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PFNumber")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RateOfInterest")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UAN")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProvidentFunds");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Assets.ResedentialProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CurrentMarketValue")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfPurchase")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("MarketValueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertyDetail")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PropertyName")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ResedentialProperties");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Assets.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvestorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfShares")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SharePrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Assets.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CurrentMarketValue")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfPurchase")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("MarketValueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertyDetail")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PropertyName")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Core.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Core.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityType")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EventDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventDetail")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Core.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Core.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Company")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MiddleName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Occupation")
                        .HasColumnType("TEXT");

                    b.Property<string>("PAN")
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("People", (string)null);
                });

            modelBuilder.Entity("Investment.Domain.Entities.Core.FamilyMember", b =>
                {
                    b.HasBaseType("Investment.Domain.Entities.Core.Person");

                    b.Property<bool>("IsEarning")
                        .HasColumnType("INTEGER");

                    b.ToTable("FamilyMembers", (string)null);
                });

            modelBuilder.Entity("Investment.Domain.Entities.Core.Organization", b =>
                {
                    b.OwnsOne("Investment.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("OrganizationId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("AddressLine")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Country")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PINCode")
                                .HasColumnType("TEXT");

                            b1.Property<string>("State")
                                .HasColumnType("TEXT");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("Organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.OwnsOne("Investment.Domain.ValueObjects.CommunicationInfo", "CommunicationInfo", b1 =>
                        {
                            b1.Property<int>("OrganizationId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("AlternatePhoneNumber")
                                .HasColumnType("TEXT");

                            b1.Property<string>("EmailAddress")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("TEXT");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("Organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.Navigation("Address");

                    b.Navigation("CommunicationInfo");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Core.Person", b =>
                {
                    b.OwnsOne("Investment.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("AddressLine")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Country")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PINCode")
                                .HasColumnType("TEXT");

                            b1.Property<string>("State")
                                .HasColumnType("TEXT");

                            b1.HasKey("PersonId");

                            b1.ToTable("People");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.OwnsOne("Investment.Domain.ValueObjects.CommunicationInfo", "CommunicationInfo", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("AlternatePhoneNumber")
                                .HasColumnType("TEXT");

                            b1.Property<string>("EmailAddress")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("TEXT");

                            b1.HasKey("PersonId");

                            b1.ToTable("People");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("Address");

                    b.Navigation("CommunicationInfo");
                });

            modelBuilder.Entity("Investment.Domain.Entities.Core.FamilyMember", b =>
                {
                    b.HasOne("Investment.Domain.Entities.Core.Person", null)
                        .WithOne()
                        .HasForeignKey("Investment.Domain.Entities.Core.FamilyMember", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
